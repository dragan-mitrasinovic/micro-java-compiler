package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

  boolean errorDetected;

	Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing aborted", cur_token);
    }

    public void report_error(String message, Object info) {
      errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM;
terminal BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOREACH;
terminal INC, DEC, PLUS, MINUS, MUL, DIV, MOD, EQUAL, NOT_EQUAL, GREATER_EQUAL, GREATER, LESS_EQUAL, LESS, AND, OR, ARROW, ASSIGN;
terminal SEMICOLON, COLON, COMMA, DOT, LEFT_PARENTHESES, RIGHT_PARENTHESES, LEFT_BRACKETS, RIGHT_BRACKETS, LEFT_BRACES, RIGHT_BRACES;
terminal String IDENTIFIER;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;

nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal VarDeclList VarDeclList;
nonterminal Methods Methods;
nonterminal FormalParams FormalParams;
nonterminal FormPars FormPars;
nonterminal ConstList ConstList;
nonterminal VarList VarList;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ArrayAssignmentList ArrayAssignmentList;
nonterminal ActPars ActPars;
nonterminal ActualParams ActualParams;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Factor Factor;
nonterminal Designator Designator;
nonterminal AssignmentStatement AssignmentStatement;

nonterminal ClassName ClassName;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal Relop Relop;
nonterminal Assignop Assignop;
nonterminal Label Label;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodTypeName, VoidMethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj FirstDeclaredArray, FirstDeclaredVariable;
nonterminal rs.etf.pp1.symboltable.concepts.Obj FirstDeclaredConstant;
nonterminal Variable Variable;
nonterminal Array Array;
nonterminal ConstantName ConstantName;

precedence left ELSE;

//Done
Program ::= 
  (Program) PROGRAM ProgName:P1 DeclList:D2 LEFT_BRACES MethodDeclList:M3 RIGHT_BRACES {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

//Done
ProgName ::= 
  (ProgName) IDENTIFIER:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

//Done
DeclList ::= 
    (ConstDeclaration) DeclList:D1 ConstDecl:C2 {: RESULT=new ConstDeclaration(D1, C2); RESULT.setLine(D1left); :}
  | (VarDeclaration) DeclList:D1 VarDecl:V2 {: RESULT=new VarDeclaration(D1, V2); RESULT.setLine(D1left); :}
  | (ClassDeclaration) DeclList:D1 ClassDecl:C2 {: RESULT=new ClassDeclaration(D1, C2); RESULT.setLine(D1left); :}
  | (EmptyDeclList) {: RESULT=new EmptyDeclList(); :} /* empty */;

// Done
ClassDecl ::=
	(ClassDecl) CLASS ClassName:C1 LEFT_BRACES VarDeclList:V2 Methods:M3 RIGHT_BRACES {: RESULT=new ClassDecl(C1, V2, M3); RESULT.setLine(C1left); :};

//Done
Methods ::=
    (MethodDefinitions) LEFT_BRACES MethodDeclList:M1 RIGHT_BRACES {: RESULT=new MethodDefinitions(M1); RESULT.setLine(M1left); :}
  | (EmptyMethods) {: RESULT=new EmptyMethods(); :} /* empty */;

//Done
VarDeclList ::=
    (VarDeclarationList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); :}
  | (EmptyVarDeclList) {: RESULT=new EmptyVarDeclList(); :} /* empty */;

//Done
MethodDeclList ::= 
    (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
  | (EmptyMethodDeclList) {: RESULT=new EmptyMethodDeclList(); :} /* empty */;

//Done
MethodDecl ::=
    (MethodDeclRet) MethodTypeName:M1 LEFT_PARENTHESES FormPars:F2 RIGHT_PARENTHESES VarDeclList:V3 LEFT_BRACES StatementList:S4 RIGHT_BRACES {: RESULT=new MethodDeclRet(M1, F2, V3, S4); RESULT.setLine(M1left); :}
  | (MethodDeclVoid) VOID VoidMethodName:V1 LEFT_PARENTHESES FormPars:F2 RIGHT_PARENTHESES VarDeclList:V3 LEFT_BRACES StatementList:S4 RIGHT_BRACES {: RESULT=new MethodDeclVoid(V1, F2, V3, S4); RESULT.setLine(V1left); :};

//Done
MethodTypeName ::= (MethodTypeName) Type:retType IDENTIFIER:methodName {: RESULT=new MethodTypeName(retType, methodName); RESULT.setLine(retTypeleft); :};

//Done
VoidMethodName ::= (VoidMethodName) IDENTIFIER:methodName {: RESULT=new VoidMethodName(methodName); RESULT.setLine(methodNameleft); :};

//Done
FormPars ::=
    (FormalParamaters) FormalParams:F1 {: RESULT=new FormalParamaters(F1); RESULT.setLine(F1left); :}
  | (EmptyFormalParamList) {: RESULT=new EmptyFormalParamList(); :} /* empty */;

//Done
FormalParams ::= 
    (SingleFormalParamVar) Type:T1 Variable:V2 {: RESULT=new SingleFormalParamVar(T1, V2); RESULT.setLine(T1left); :}
  | (SingleFormalParamArr) Type:T1 Array:A2 {: RESULT=new SingleFormalParamArr(T1, A2); RESULT.setLine(T1left); :}
  | (MultipleFormalParamVar) FormalParams:F1 COMMA Type:T2 Variable:V3 {: RESULT=new MultipleFormalParamVar(F1, T2, V3); RESULT.setLine(F1left); :}
  | (MultipleFormalParamArr) FormalParams:F1 COMMA Type:T2 Array:A3 {: RESULT=new MultipleFormalParamArr(F1, T2, A3); RESULT.setLine(F1left); :};

//Done
StatementList ::=
    (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
  | (EmptyStatementList) {: RESULT=new EmptyStatementList(); :} /* empty */;

Statement ::=
    (Assignment) AssignmentStatement:A1 {: RESULT=new Assignment(A1); RESULT.setLine(A1left); :}
  | (IfStatement) IF LEFT_PARENTHESES Condition:C1 RIGHT_PARENTHESES Statement:S2 {: RESULT=new IfStatement(C1, S2); RESULT.setLine(C1left); :}
  | (IfElseStatement) IF LEFT_PARENTHESES Condition:C1 RIGHT_PARENTHESES Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseStatement(C1, S2, S3); RESULT.setLine(C1left); :}
  | (WhileStatement) WHILE LEFT_PARENTHESES Condition:C1 RIGHT_PARENTHESES Statement:S2 {: RESULT=new WhileStatement(C1, S2); RESULT.setLine(C1left); :}
  | (BreakStatement) BREAK SEMICOLON {: RESULT=new BreakStatement(); :}
  | (ContinueStatement) CONTINUE SEMICOLON {: RESULT=new ContinueStatement(); :}
  | (ReturnStatement) RETURN Expr:E1 SEMICOLON {: RESULT=new ReturnStatement(E1); RESULT.setLine(E1left); :}
  | (ReturnVoidStatement) RETURN SEMICOLON {: RESULT=new ReturnVoidStatement(); :}
  | (ReadStatement) READ LEFT_PARENTHESES Designator:D1 RIGHT_PARENTHESES SEMICOLON {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
  | (PrintStatement) PRINT LEFT_PARENTHESES Expr:E1 RIGHT_PARENTHESES SEMICOLON {: RESULT=new PrintStatement(E1); RESULT.setLine(E1left); :}
  | (PrintMultipleStatement) PRINT LEFT_PARENTHESES Expr:E1 COMMA NUM_CONST:N2 RIGHT_PARENTHESES SEMICOLON {: RESULT=new PrintMultipleStatement(E1, N2); RESULT.setLine(E1left); :}
  | (NestedStatement) LEFT_BRACES StatementList:S1 RIGHT_BRACES {: RESULT=new NestedStatement(S1); RESULT.setLine(S1left); :};

DesignatorStatement ::=
   (ValueAssignment) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new ValueAssignment(D1, A2, E3); RESULT.setLine(D1left); :}
  | (FunctionAssignment) Designator:D1 LEFT_PARENTHESES ActPars:A2 RIGHT_PARENTHESES {: RESULT=new FunctionAssignment(D1, A2); RESULT.setLine(D1left); :}
  | (Postincrement) Designator:D1 INC {: RESULT=new Postincrement(D1); RESULT.setLine(D1left); :}
  | (Postdecrement) Designator:D1 DEC {: RESULT=new Postdecrement(D1); RESULT.setLine(D1left); :}
  | (ArrayAssignment) LEFT_BRACKETS Designator:D1 ArrayAssignmentList:A2 RIGHT_BRACKETS ASSIGN Designator:D3 {: RESULT=new ArrayAssignment(D1, A2, D3); RESULT.setLine(D1left); :}
  | (ArrayAssignmentNoFirst) LEFT_BRACKETS ArrayAssignmentList:A1 RIGHT_BRACKETS ASSIGN Designator:D2 {: RESULT=new ArrayAssignmentNoFirst(A1, D2); RESULT.setLine(A1left); :};

AssignmentStatement ::=
      (ValidAssignmentStatement) DesignatorStatement:D1 SEMICOLON {: RESULT=new ValidAssignmentStatement(D1); RESULT.setLine(D1left); :}
    | (ErrorAssignment) error SEMICOLON:l
      {: parser.report_error("Performed recovery until symbol ; at line " + lleft, null);  :} {: RESULT=new ErrorAssignment(); :};

ArrayAssignmentList ::=
    (ArrayAssignmentSkip) ArrayAssignmentList:A1 COMMA {: RESULT=new ArrayAssignmentSkip(A1); RESULT.setLine(A1left); :} 
  | (ArrayAssignmentAdd) ArrayAssignmentList:A1 COMMA Designator:D2 {: RESULT=new ArrayAssignmentAdd(A1, D2); RESULT.setLine(A1left); :}
  | (EmptyArrayAssignment) {: RESULT=new EmptyArrayAssignment(); :} /* empty */;

ActPars ::=
    (ActualParamaters) ActualParams:A1 {: RESULT=new ActualParamaters(A1); RESULT.setLine(A1left); :}
  | (EmptyActualParamList) {: RESULT=new EmptyActualParamList(); :} /* empty */;

ActualParams ::=
    (SingleActualParam) Expr:E1 {: RESULT=new SingleActualParam(E1); RESULT.setLine(E1left); :}
  | (MultipleActualParam) ActualParams:A1 COMMA Expr:E2 {: RESULT=new MultipleActualParam(A1, E2); RESULT.setLine(A1left); :};

Condition ::=
    (SingleCond) CondTerm:C1 {: RESULT=new SingleCond(C1); RESULT.setLine(C1left); :}
  | (OrCond) Condition:C1 OR CondTerm:C2 {: RESULT=new OrCond(C1, C2); RESULT.setLine(C1left); :};

CondTerm ::= 
    (SingleCondTerm) CondFact:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
  | (AndCondTerm) CondTerm:C1 AND CondFact:C2 {: RESULT=new AndCondTerm(C1, C2); RESULT.setLine(C1left); :};

CondFact ::=
    (SingleCondFact) Expr:E1 {: RESULT=new SingleCondFact(E1); RESULT.setLine(E1left); :}
  | (RelopCondFact) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new RelopCondFact(E1, R2, E3); RESULT.setLine(E1left); :};

Expr ::=
    (SingleExpression) Term:T1 {: RESULT=new SingleExpression(T1); RESULT.setLine(T1left); :}
  | (SingleNegatedExpression) MINUS Term:T1 {: RESULT=new SingleNegatedExpression(T1); RESULT.setLine(T1left); :}
  | (AddExpression) Expr:E1 Addop:A2 Term:T3 {: RESULT=new AddExpression(E1, A2, T3); RESULT.setLine(E1left); :};

Term ::=
    (SingleTerm) Factor:F1 {: RESULT=new SingleTerm(F1); RESULT.setLine(F1left); :}
  | (MulTerm) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MulTerm(T1, M2, F3); RESULT.setLine(T1left); :};

Factor ::=
    (VariableFactor) Designator:D1 {: RESULT=new VariableFactor(D1); RESULT.setLine(D1left); :}
  | (FunctionFactor) Designator:D1 LEFT_PARENTHESES ActPars:A2 RIGHT_PARENTHESES {: RESULT=new FunctionFactor(D1, A2); RESULT.setLine(D1left); :}
  | (NumConstFactor) NUM_CONST:N1 {: RESULT=new NumConstFactor(N1); RESULT.setLine(N1left); :}
  | (BoolConstFactor) BOOL_CONST:B1 {: RESULT=new BoolConstFactor(B1); RESULT.setLine(B1left); :}
  | (CharConstFactor) CHAR_CONST:C1 {: RESULT=new CharConstFactor(C1); RESULT.setLine(C1left); :}
  | (NewArrayFactor) NEW Type:T1 LEFT_BRACKETS Expr:E2 RIGHT_BRACKETS {: RESULT=new NewArrayFactor(T1, E2); RESULT.setLine(T1left); :} 
  | (NewObjectFactor) NEW Type:T1 LEFT_PARENTHESES ActPars:A2 RIGHT_PARENTHESES {: RESULT=new NewObjectFactor(T1, A2); RESULT.setLine(T1left); :}
  | (ExpressionFactor) LEFT_PARENTHESES Expr:E1 RIGHT_PARENTHESES {: RESULT=new ExpressionFactor(E1); RESULT.setLine(E1left); :};

Designator ::=
    (SingleDesignator) IDENTIFIER:I1 {: RESULT=new SingleDesignator(I1); RESULT.setLine(I1left); :} 
  | (FieldDesignator) Designator:D1 DOT IDENTIFIER:I2 {: RESULT=new FieldDesignator(D1, I2); RESULT.setLine(D1left); :}
  | (ArrayElementDesignator) Designator:D1 LEFT_BRACKETS Expr:E2 RIGHT_BRACKETS {: RESULT=new ArrayElementDesignator(D1, E2); RESULT.setLine(D1left); :};

ConstDecl ::=
    (ConstDecl) FirstDeclaredConstant:F1 ConstList:C2 SEMICOLON {: RESULT=new ConstDecl(F1, C2); RESULT.setLine(F1left); :};
  
ConstList ::=
    (EmptyConstList) {: RESULT=new EmptyConstList(); :} /* empty */
  | (ConstDeclNum) ConstList:C1 COMMA ConstantName:C2 ASSIGN NUM_CONST:N3 {: RESULT=new ConstDeclNum(C1, C2, N3); RESULT.setLine(C1left); :}
  | (ConstDeclBool) ConstList:C1 COMMA ConstantName:C2 ASSIGN BOOL_CONST:B3 {: RESULT=new ConstDeclBool(C1, C2, B3); RESULT.setLine(C1left); :}
  | (ConstDeclChar) ConstList:C1 COMMA ConstantName:C2 ASSIGN CHAR_CONST:C3 {: RESULT=new ConstDeclChar(C1, C2, C3); RESULT.setLine(C1left); :};

FirstDeclaredConstant ::= 
    (FirstDeclaredConstantNum) CONST Type:T1 ConstantName:C2 ASSIGN NUM_CONST:N3 {: RESULT=new FirstDeclaredConstantNum(T1, C2, N3); RESULT.setLine(T1left); :}
  | (FirstDeclaredConstantBool) CONST Type:T1 ConstantName:C2 ASSIGN BOOL_CONST:B3 {: RESULT=new FirstDeclaredConstantBool(T1, C2, B3); RESULT.setLine(T1left); :}
  | (FirstDeclaredConstantChar) CONST Type:T1 ConstantName:C2 ASSIGN CHAR_CONST:C3 {: RESULT=new FirstDeclaredConstantChar(T1, C2, C3); RESULT.setLine(T1left); :};

ConstantName ::= (ConstantName) IDENTIFIER:constantName {: RESULT=new ConstantName(constantName); RESULT.setLine(constantNameleft); :};
  
//Done
VarDecl ::=
    (ErrorVarDeclSemi) error SEMICOLON:l
      {: parser.report_error("Performed recovery until symbol ; at line " + lleft, null);  :} {: RESULT=new ErrorVarDeclSemi(); :}
  | (ErrorVarDeclComma) error COMMA:l
      {: parser.report_error("Performed recovery until symbol , at line " + lleft, null);  :} {: RESULT=new ErrorVarDeclComma(); :}
  | (VarDeclV) FirstDeclaredVariable:F1 VarList:V2 SEMICOLON {: RESULT=new VarDeclV(F1, V2); RESULT.setLine(F1left); :}
  | (VarDeclA) FirstDeclaredArray:F1 VarList:V2 SEMICOLON {: RESULT=new VarDeclA(F1, V2); RESULT.setLine(F1left); :};

//Done
VarList ::=
    (ErrorVarListSemi) error SEMICOLON:l
      {: parser.report_error("Performed recovery until symbol ; at line " + lleft, null);  :} {: RESULT=new ErrorVarListSemi(); :}
  | (ErrorVarListComma) error COMMA:l
      {: parser.report_error("Performed recovery until symbol , at line " + lleft, null);  :} {: RESULT=new ErrorVarListComma(); :}
	| (EmptyVarList) {: RESULT=new EmptyVarList(); :} /* empty */  
  | (VarDeclChain) VarList:V1 COMMA Variable:V2 {: RESULT=new VarDeclChain(V1, V2); RESULT.setLine(V1left); :} 
  | (ArrDeclChain) VarList:V1 COMMA Array:A2 {: RESULT=new ArrDeclChain(V1, A2); RESULT.setLine(V1left); :};

//Done
FirstDeclaredVariable ::= (FirstDeclaredVariable) Type:T1 Variable:V2 {: RESULT=new FirstDeclaredVariable(T1, V2); RESULT.setLine(T1left); :};

//Done
FirstDeclaredArray ::= (FirstDeclaredArray) Type:T1 Array:A2 {: RESULT=new FirstDeclaredArray(T1, A2); RESULT.setLine(T1left); :};
  

Type ::= (Type) IDENTIFIER:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};
Label ::= (Label) IDENTIFIER:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};
ClassName ::= (BaseClass) IDENTIFIER:I1 {: RESULT=new BaseClass(I1); RESULT.setLine(I1left); :} | (SubClass) IDENTIFIER:I1 EXTENDS Type:T2 {: RESULT=new SubClass(I1, T2); RESULT.setLine(I1left); :};
Variable ::= (Variable) IDENTIFIER:varName {: RESULT=new Variable(varName); RESULT.setLine(varNameleft); :};
Array ::= (Array) IDENTIFIER:arrName LEFT_BRACKETS RIGHT_BRACKETS {: RESULT=new Array(arrName); RESULT.setLine(arrNameleft); :};

Mulop ::= MUL {: RESULT=new MulopDerived1(); :} | DIV {: RESULT=new MulopDerived2(); :} | MOD {: RESULT=new MulopDerived3(); :};
Addop ::= PLUS {: RESULT=new AddopDerived1(); :} | MINUS {: RESULT=new AddopDerived2(); :};
Relop ::= EQUAL {: RESULT=new RelopDerived1(); :} | NOT_EQUAL {: RESULT=new RelopDerived2(); :} | GREATER_EQUAL {: RESULT=new RelopDerived3(); :} | GREATER {: RESULT=new RelopDerived4(); :} | LESS_EQUAL {: RESULT=new RelopDerived5(); :} | LESS {: RESULT=new RelopDerived6(); :};
Assignop ::= ASSIGN {: RESULT=new AssignopDerived1(); :};

